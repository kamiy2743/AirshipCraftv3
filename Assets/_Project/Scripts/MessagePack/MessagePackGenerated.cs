// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MyMessagePackExt.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(8)
            {
                { typeof(global::BlockSystem.BlockData[]), 0 },
                { typeof(global::MasterData.Block.BlockID), 1 },
                { typeof(global::Util.SurfaceNormal), 2 },
                { typeof(global::BlockSystem.BlockCoordinate), 3 },
                { typeof(global::BlockSystem.BlockData), 4 },
                { typeof(global::BlockSystem.ChunkCoordinate), 5 },
                { typeof(global::BlockSystem.ChunkData), 6 },
                { typeof(global::BlockSystem.LocalCoordinate), 7 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::BlockSystem.BlockData>();
                case 1: return new MyMessagePackExt.Formatters.MasterData.Block.BlockIDFormatter();
                case 2: return new MyMessagePackExt.Formatters.Util.SurfaceNormalFormatter();
                case 3: return new MyMessagePackExt.Formatters.BlockSystem.BlockCoordinateFormatter();
                case 4: return new MyMessagePackExt.Formatters.BlockSystem.BlockDataFormatter();
                case 5: return new MyMessagePackExt.Formatters.BlockSystem.ChunkCoordinateFormatter();
                case 6: return new MyMessagePackExt.Formatters.BlockSystem.ChunkDataFormatter();
                case 7: return new MyMessagePackExt.Formatters.BlockSystem.LocalCoordinateFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MyMessagePackExt.Formatters.MasterData.Block
{

    public sealed class BlockIDFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MasterData.Block.BlockID>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MasterData.Block.BlockID value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::MasterData.Block.BlockID Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::MasterData.Block.BlockID)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MyMessagePackExt.Formatters.Util
{

    public sealed class SurfaceNormalFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Util.SurfaceNormal>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Util.SurfaceNormal value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Util.SurfaceNormal Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Util.SurfaceNormal)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MyMessagePackExt.Formatters.BlockSystem
{
    public sealed class BlockCoordinateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::BlockSystem.BlockCoordinate>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::BlockSystem.BlockCoordinate value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(3);
            writer.Write(value.x);
            writer.Write(value.y);
            writer.Write(value.z);
        }

        public global::BlockSystem.BlockCoordinate Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __x__ = default(uint);
            var __y__ = default(uint);
            var __z__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __x__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __y__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __z__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::BlockSystem.BlockCoordinate(__x__, __y__, __z__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BlockDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::BlockSystem.BlockData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::BlockSystem.BlockData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::MasterData.Block.BlockID>(formatterResolver).Serialize(ref writer, value.ID, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::BlockSystem.BlockCoordinate>(formatterResolver).Serialize(ref writer, value.BlockCoordinate, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Util.SurfaceNormal>(formatterResolver).Serialize(ref writer, value.ContactOtherBlockSurfaces, options);
        }

        public global::BlockSystem.BlockData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ContactOtherBlockSurfaces__ = default(global::Util.SurfaceNormal);
            var __ID__ = default(global::MasterData.Block.BlockID);
            var __BlockCoordinate__ = default(global::BlockSystem.BlockCoordinate);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __ID__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::MasterData.Block.BlockID>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __BlockCoordinate__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::BlockSystem.BlockCoordinate>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __ContactOtherBlockSurfaces__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Util.SurfaceNormal>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::BlockSystem.BlockData(__ID__, __BlockCoordinate__, __ContactOtherBlockSurfaces__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ChunkCoordinateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::BlockSystem.ChunkCoordinate>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::BlockSystem.ChunkCoordinate value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(3);
            writer.Write(value.x);
            writer.Write(value.y);
            writer.Write(value.z);
        }

        public global::BlockSystem.ChunkCoordinate Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __x__ = default(ushort);
            var __y__ = default(ushort);
            var __z__ = default(ushort);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __x__ = reader.ReadUInt16();
                        break;
                    case 1:
                        __y__ = reader.ReadUInt16();
                        break;
                    case 2:
                        __z__ = reader.ReadUInt16();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::BlockSystem.ChunkCoordinate(__x__, __y__, __z__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ChunkDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::BlockSystem.ChunkData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::BlockSystem.ChunkData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::BlockSystem.ChunkCoordinate>(formatterResolver).Serialize(ref writer, value.ChunkCoordinate, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::BlockSystem.BlockData[]>(formatterResolver).Serialize(ref writer, value.Blocks, options);
        }

        public global::BlockSystem.ChunkData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ChunkCoordinate__ = default(global::BlockSystem.ChunkCoordinate);
            var __Blocks__ = default(global::BlockSystem.BlockData[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __ChunkCoordinate__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::BlockSystem.ChunkCoordinate>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Blocks__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::BlockSystem.BlockData[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::BlockSystem.ChunkData(__ChunkCoordinate__, __Blocks__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LocalCoordinateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::BlockSystem.LocalCoordinate>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::BlockSystem.LocalCoordinate value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(3);
            writer.Write(value.x);
            writer.Write(value.y);
            writer.Write(value.z);
        }

        public global::BlockSystem.LocalCoordinate Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __x__ = default(byte);
            var __y__ = default(byte);
            var __z__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __x__ = reader.ReadByte();
                        break;
                    case 1:
                        __y__ = reader.ReadByte();
                        break;
                    case 2:
                        __z__ = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::BlockSystem.LocalCoordinate(__x__, __y__, __z__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

